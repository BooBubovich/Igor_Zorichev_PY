"""
++++++++++++++++++++++++++++++++++++++++++++++++
Чтение и запись данных из файлов
++++++++++++++++++++++++++++++++++++++++++++++++
===============================================
1. Создайте текстовый файл data.txt со следующим содержимым:

Python – это мощный язык программирования.
Работа с файлами важна для автоматизации.
Чтение файлов в Python удобно и просто.

Напишите программу, которая полностью прочитает файл и выведет его содержимое.
"""
# f = open(file = 'data.txt', mode = 'r', encoding='utf-8')
# read_file = f.read()
# print(read_file)
# f.close()
#
#  #я прочитал что Python использует системную кодировку для открытия файлов, на macOC (как у тебя в видео) она по умолчанию UTF-8, а у меня Windows с системной cp1251, поэтому нужно указывать дополнительно encoding='utf-8'
"""
===============================================
2. Напишите программу, которая считает и выведет только первую строку из файла data.txt.
Ожидаемый вывод:
Python – это мощный язык программирования.
"""
# f = open('data.txt', encoding='utf-8')
# print(f.readline())
# f.close()
"""
===============================================
3. Откройте файл data.txt и прочитайте первые 10 символов.
Ожидаемый вывод:
Python – э
"""
# with open('data.txt', encoding='utf-8') as f:
#     print(f.read(10))
"""
===============================================
4. Прочитайте все строки файла и сохраните их в список. Затем выведите этот список.
Ожидаемый вывод:
['Python – это мощный язык программирования.\n', 'Работа с файлами важна для автоматизации.\n', 'Чтение файлов в Python удобно и просто.\n']
"""
# with open('data.txt', encoding='utf-8') as f:
#     flist = f.readlines()
#     print(flist)
"""
===============================================
5. Напишите программу, которая считает строки файла data.txt в цикле и выводит их по одной, убирая символ \n в конце.
Ожидаемый вывод:
Строка: Python – это мощный язык программирования.
Строка: Работа с файлами важна для автоматизации.
Строка: Чтение файлов в Python удобно и просто.
"""
# with open('data.txt', encoding='utf-8') as f:
#     for line in f.readlines():
#         print(line.rstrip())
"""
===============================================
6. Откройте файл data.txt, прочитайте 5 символов, затем переместите указатель в начало файла
и снова прочитайте 5 символов и выведите их.
Ожидаемый вывод:
Python
Python
"""
# with open('data.txt', encoding='utf-8') as f:
#     print(f.read(5))
#     f.seek(0)
#     print(f.read(5))
"""
===============================================
7. Напишите программу, которая откроет файл data.txt, определит его размер (в байтах) и выведет его.
Ожидаемый вывод:
Размер файла: 128 байт  # (значение может отличаться)
"""
# with open('data.txt', encoding='utf-8') as f:
#     f.seek(0, 2)
#     print(f"Размер файла: {f.tell()} байт")
#
#
#
# # def seek(self, __offset: int, __whence: int = 0) -> int
# #первый аргумент - смещение, второй - точка отсчёта (0-начало, 1-текущая позиция, 2-конец) по умолчанию whence=0,
# # .seek(0, 2) тут указываем первый аргумент без смещения 0, второй аргумент 2 - конец,
#
# #.tell() считает не в символах а в байтах. 1 символ не обязательно равен 1 байт
# # Буквы русского алфавита = 2 байт, поэтому 90 русских символов * 2 = 180, 180 + 38 не русских как раз результат 218
"""
===============================================
8. Используйте with open(), чтобы прочитать и вывести содержимое файла data.txt.
"""
# with open('data.txt', encoding='utf-8') as f:
#     print(f.read())
"""
===============================================
9. Напишите программу, которая пытается открыть файл data.txt, прочитать его содержимое и вывести его.
Если файл не найден, программа должна вывести "Ошибка: Файл не найден".

Ожидаемый вывод (если файл есть):
Python – это мощный язык программирования.
Работа с файлами важна для автоматизации.
Чтение файлов в Python удобно и просто.

Ожидаемый вывод (если файла нет):
Ошибка: Файл не найден
"""
# try:
#     with open('data.txt', encoding='utf-8') as f:
#         print(f.read())
#     with open('daaa.txt', encoding='utf-8') as g:
#         print(g.read())
# except FileNotFoundError:
#     print('Файл не найлен')
"""
===============================================
10. Модифицируйте программу из Задания 1, добавив гарантированное закрытие файла в блоке finally.
"""
# try:
#     f = open(file = 'data.txt', mode = 'r', encoding='utf-8')
#     print('Файл открыт')
#     try:
#         read_file= f.read()
#         print(read_file)
#     finally:
#         f.close()       #этот блок отработает всегда, если файл data.exe найден и был открыт, но например в read_file= f.read() случится какая-то ошибка, значит файл гарантированно будет закрыт, если он был открыт
#         print('Файл закрыт')
# except FileNotFoundError:
#     print('Файл не найлен')
"""
===============================================
11. Используйте with open(), чтобы безопасно открыть файл data.txt и прочитать его построчно.
Если файл не найден, выведите "Ошибка: Файл не найден".
"""
# try:
#     with open('data.txt', encoding='utf-8') as f:
#         for line in f.readlines():
#             print(line, end='')
# except FileNotFoundError:
#     print('Файл не найден')
"""
===============================================
12. Создайте файл numbers.txt, который содержит по одному числу в каждой строке.
Напишите программу, которая читает файл, суммирует все числа и выводит их сумму.
Если файл не найден, программа должна вывести "Ошибка: Файл не найден".
"""
# try:
#     summ = 0
#     with open('numbers.txt', encoding='utf-8') as f:
#         for line in f.readlines():
#             summ += int(line.strip())
#         print(summ)
# except FileNotFoundError:
#     print('Файл не найден')
"""
13. Создайте файл log.txt.
Программа должна добавлять в него текущую дату и время при каждом запуске.
Используйте модуль datetime и режим "a".

Получение даты и времени для логирования:
import datetime
print(datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"))

Пример содержимого файла после нескольких запусков:

2024-02-16 14:30:01 Запуск программы
2024-02-16 14:35:15 Запуск программы
2024-02-16 14:40:22 Запуск программы
"""
# import datetime
#
# with open('logs.txt', mode='a+', encoding='utf-8') as logs:
#     logs.write(f'{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')} Запуск программы\n')
#     logs.seek(0)
#     print(logs.read())