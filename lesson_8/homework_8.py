"""
++++++++++++++++++++++++++++++++++++++++++++++++
Задачи по итераторам
++++++++++++++++++++++++++++++++++++++++++++++++
===============================================
1. Пройти по списку с помощью итератора
Создайте итератор для списка и выведите все его элементы с использованием next()."""
# lst_1 = [1, 'ДВА', 3.3, False]
# itr_lst_1 = iter(lst_1)
# print(next(iter_lst_1))
# print(next(iter_lst_1))
# print(next(iter_lst_1))
# print(next(iter_lst_1))
"""
===============================================
2. Итератор для строки
Используйте iter() и next() для посимвольного вывода строки."""
# s = 'Это строка'
# itr_s = iter(s)
#
# for i in range(len(s)):
#     print(next(itr_s))
"""
++++++++++++++++++++++++++++++++++++++++++++++++
Задачи по теме "Генераторы списков (List Comprehensions)"
++++++++++++++++++++++++++++++++++++++++++++++++
===============================================
1. Создайте список из квадратов чисел от 1 до N, используя list comprehension."""
# n = 6
# res = [num ** 2 for num in range(n + 1)]
# print(res)
"""
===============================================
2. Сформируйте список, содержащий только четные числа в диапазоне от -10 до 10."""
# res = [i for i in range(-10, 11) if i % 2 == 0]
# print(res)
"""
===============================================
3. Дан список слов. Создайте новый список, содержащий длины всех слов, используя генератор списков."""
# lst_str = ['Дан', 'список', 'слов', 'Создайте', 'новый', 'список', 'содержащий', 'длины', 'всех', 'слов', 'используя', 'генератор', 'списков']
# res = [len(i) for i in lst_str]
# print(res)
"""
===============================================
4. Создайте список из чисел от 1 до 20, где вместо четных чисел будет "четное", а вместо нечетных — "нечетное" (используйте тернарный оператор)"""
# res = ['четное' if i % 2 == 0 else 'нечётное' for i in range(1, 21)]
# print(res)
"""
===============================================
5. Проверка, является ли объект итерируемым
Создайте список внутри которого 3 объекта: число, строка и список.
Создайте генератор в котором будет написано True - если объект является итерируемым или False - если нет.
"""
lst = [1, 'два', ['один', 2, 3.3]]
res = [True if hasattr(i, '__iter__') else False for i in lst] #из урока не понял как сделать такую проверку, пришлось загуглить функцию hasattr
print(res)