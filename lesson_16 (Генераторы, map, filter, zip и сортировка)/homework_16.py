"""
++++++++++++++++++++++++++++++++++++++++++++++++
Выражения-генераторы
++++++++++++++++++++++++++++++++++++++++++++++++
===============================================
1. Создайте генератор, который возвращает только строки из списка:
["Python", 123, "Java", 456, "C++", 789]
Выведите все строки в одну строку через пробел.
Ожидаемый вывод:
Python Java C++
"""
# lst = ["Python", 123, "Java", 456, "C++", 789]
#
# res = filter(lambda i: isinstance(i, str), lst)
# print(' '.join(res))
"""
===============================================
2. Создайте генератор случайных чисел от 1 до 100 (10 чисел),
используя модуль random (попробуйте сами найти как использовать), и найдите максимальное число.
Ожидаемый вывод:
Максимальное число: 98  # (значение может отличаться)
"""
# import random
#
# gen = (random.randint(1, 100) for i in range(10))
# print(max(gen))
"""
===============================================
3. Создайте генератор, который возвращает слова из файла words.txt,
но только те, которые длиннее 5 символов.
Пример содержимого файла (words.txt):
apple banana cat elephant python
Ожидаемый вывод:
banana elephant python
"""
# with open('words.txt', encoding='utf-8') as f:
#     paper = f.read().split()
#     gen = filter(lambda i: len(i) > 5, paper)
#     res = ' '.join(gen)
#     print(res)

"""
===============================================
4. Напишите функцию-генератор, которая перебирает строки файла text.txt,
возвращая только те, которые содержат слово "Python".
Пример содержимого text.txt:
Hello world
Python is great
I love coding in Python
Java is also good
Ожидаемый вывод:
Python is great
I love coding in Python
"""
# def func_gen():
#     with open('text.txt', encoding='utf-8') as f:
#         for i in f.readlines():
#             paper = i.strip()
#             if 'Python' in paper:
#                 yield paper
#
# gen = func_gen()
#
# for i in gen:
#     print(i)
"""
===============================================
5. Создайте бесконечный генератор, который возвращает случайные числа от 1 до 100.
Остановите выполнение, как только сгенерируется число 50.
Ожидаемый вывод (значения могут отличаться):
23 89 17 50
"""
# import random
#
# def generator():
#     while True:
#         gen = (random.randint(1, 100))
#         yield gen
#         if gen == 50:
#             return
# print(*generator())
"""
===============================================
6. Создайте функцию-генератор, которая возвращает первые N простых чисел.
Выведите первые 10 простых чисел.
Ожидаемый вывод:
2 3 5 7 11 13 17 19 23 29
"""


# def is_prostoe(chislo):             #сделал отдельную функцию проверки является ли число простым на основе задания из урока 7
#     i = 2
#     while i != chislo:
#         if chislo % i == 0 or chislo < 2:
#             return False
#         i += 1
#     else:
#         return True
#
# def generator_tselih_cisel(cnt):    #генератор чисел, возвращает только целые (True из функции выше) и записывает их количество
#     counter = 0
#     chislo = 2
#     while counter < cnt:
#         if is_prostoe(chislo):
#             yield chislo
#             counter += 1
#         chislo += 1
#
# gen = generator_tselih_cisel(int(input('Введи количество: ')))
#
# print(*gen)

"""
===============================================
7. Создайте функцию-генератор, которая имитирует загрузку данных из API.
Генератор должен возвращать строки "Получены данные 1", "Получены данные 2", …
Остановите генерацию после 5 вызовов next().
Ожидаемый вывод:
Получены данные 1
Получены данные 2
Получены данные 3
Получены данные 4
Получены данные 5
"""
# def request(cnt):
#     for i in range(cnt):
#         yield f"Получены данные {i + 1}"
#
# gen = request(5)
# for i in gen:
#     print(i)
"""
===============================================
8. Используйте map() вместе с лямбда-функцией, чтобы для каждого числа из пользовательского ввода
(числа, разделённые пробелами) вычислить его квадрат.
Результатом должно быть преобразование входной строки в список квадратов.
"""
# a = input('Введи числа: ').split()
# res = map(lambda x: int(x) **2, a)
# print(list(res))
"""
===============================================
9. Напишите программу, которая с помощью map() и метода строк upper преобразует список названий городов к верхнему регистру.
Например, преобразуйте список ["Москва", "Санкт-Петербург", "Казань"] в ["МОСКВА", "САНКТ-ПЕТЕРБУРГ", "КАЗАНЬ"].
"""
# lst = ["Москва", "Санкт-Петербург", "Казань"]
# res = map(lambda s: s.upper(), lst)
# print(list(res))
"""
===============================================
10. Используя filter(), оставьте в списке только те числа, которые делятся на 3 и на 5 одновременно.
Дан список: [15, 30, 45, 22, 60, 77, 90, 100].
"""
# lst = [15, 30, 45, 22, 60, 77, 90, 100]
# res = filter(lambda x: x % 3 == 0 and x % 5 == 0, lst)
# print(list(res))
"""
===============================================
11. Используя filter(), получите из списка только строки, содержащие хотя бы одну цифру.
Дан список: ["hello", "world42", "python3", "abc", "123", "data1science"].
"""
# lst = ["hello", "world42", "python3", "abc", "123", "data1science"]
#
# res = filter(lambda i: any(j.isdigit() for j in i), lst)
#
# print(list(res))
"""
===============================================
12. Используйте zip() и dict(), чтобы создать словарь, в котором:
Ключи – это названия стран
Значения – их столицы
Исходные списки:
countries = ["Россия", "Франция", "Германия"]
capitals = ["Москва", "Париж", "Берлин"]
Результат должен быть таким:
{"Россия": "Москва", "Франция": "Париж", "Германия": "Берлин"}
Подсказка: zip объект можно сразу преобразовать в словарь, если в zip преобразовали 2 итерируемых объекта.
"""
# countries = ["Россия", "Франция", "Германия"]
# capitals = ["Москва", "Париж", "Берлин"]
#
# res = dict(zip(countries, capitals))
# print(res)
"""
===============================================
13. Используйте zip(*iterable), чтобы выполнить обратное преобразование списка кортежей:
data = [(1, 'a'), (2, 'b'), (3, 'c')]
Распакуйте его в два отдельных списка:
[1, 2, 3]
['a', 'b', 'c']
"""
# data = [(1, 'a'), (2, 'b'), (3, 'c')]
#
# numbers, not_numbers = zip(*data)
#
# numbers = list(numbers)
# not_numbers = list(not_numbers)
#
# print(numbers)
# print(not_numbers)
"""
14. Дан список имен names. Отсортируйте его так, чтобы сначала шли имена с заглавной буквы, а затем – с маленькой.
names = ["петр", "Иван", "мария", "Анна"]
Ожидаемый результат:
["Анна", "Иван", "мария", "петр"]

Подсказка: вспомните как найти id буквы чтобы понять какая больше заглавная или строчная =)
"""
# names = ["петр", "Иван", "мария", "Анна"]
# res = sorted(names, key = lambda x: tuple(map(ord, x)))     #id любого символа заглавных буквы меньше id любого символа строчных букв. Таким образом сортирует по id символов начиная с первого
# print(res)
"""
15. Дан список кортежей products, где первый элемент – название товара, второй – цена.
 Отсортируйте его по цене (по возрастанию).

products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
Ожидаемый результат:

[("Телефон", 500), ("Планшет", 700), ("Ноутбук", 1000)]
"""
# products = [("Телефон", 500), ("Ноутбук", 1000), ("Планшет", 700)]
# res = sorted(products, key=lambda x: x[1])
# print(res)
