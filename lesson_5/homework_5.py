"""
++++++++++++++++++++++++++++++++++++++++++++++++
Списки
++++++++++++++++++++++++++++++++++++++++++++++++
================================================
1. Создание списков
================================================
Создай список cities с элементами: "Москва", "Тверь", "Вологда".
Создай список numbers с целыми числами от 1 до 5.
Создай список mixed с элементами разных типов: число, строка, булево значение, вещественное число."""
from operator import truediv
from runpy import run_path

# cities = ['Москва', 'Тверь', 'Вологда']
# numbers = [1, 2, 4, 3, 5]
# mixed = [1, 2.2, 'три', False]
"""
================================================
2. Доступ к элементам списка
================================================
Выведи первый элемент списка cities.
Выведи последний элемент списка numbers с помощью отрицательного индекса.
Попробуй получить элемент с индексом 10 из cities. Что произойдет?"""
# print(cities[0])
# print(numbers[-1])
# print(cities[10]) #выходит за пределы списка
"""
================================================
3. Изменение элементов списка
================================================
Замени второй элемент списка numbers на 10.
Замени последний элемент списка mixed на "Python"."""
# numbers[1] = 10
# print(numbers)
# mixed[-1] = 'Python'
# print(mixed)
"""
================================================
4. Функции для работы со списками
================================================
Выведи длину списка numbers.
Найди максимальное и минимальное значение в numbers.
Вычисли сумму всех элементов списка numbers.
Отсортируй список numbers по возрастанию и убыванию."""
# print(len(numbers))
# print(min(numbers))
# print(max(numbers))
# print(sum(numbers))
# print(sorted(numbers))
# print(sorted(numbers, reverse=True))
"""
================================================
5. Операции со списками
================================================
Объедини два списка [1, 2, 3] и [4, 5].
Продублируй список ["Python", "is", "awesome"] три раза."""
# print([1, 2, 3] + [4, 5])
# print(["Python", "is", "awesome"] * 3)
"""
================================================
6. Проверка вхождения
================================================
Проверь, содержится ли число 3 в списке numbers.
Проверь, содержится ли "Москва" в cities.
Проверь, содержится ли [1, 2] в mixed."""
# print(3 in numbers)
# print('Москва' in cities)
# print([1, 2] in mixed)
"""
================================================
7. Удаление элементов
================================================
Удали третий элемент из numbers.
Удали последний элемент из cities с помощью del."""
# del cities[-1]
# print(cities)
"""
================================================
8. Дополнительное задание
================================================
Преобразуй строку "Python" в список символов.
Найди максимальный и минимальный символ в этом списке.
Попробуй сложить все элементы списка. Что произойдет?"""
# lst1 = list('Python')
# print(lst1)
# print(max(lst1))
# print(min(lst1))
# print(sum(lst1)) # нельзя т.к. внутри элементы str а не int
"""
++++++++++++++++++++++++++++++++++++++++++++++++
Срезы списков
++++++++++++++++++++++++++++++++++++++++++++++++
================================================
1. Создание и копирование списков
================================================
Создай список с городами.
Создай копию списка с помощью среза.
Проверь, является ли оригинальный список и его копия разными объектами."""
# cities_2 = ['Москва', 'Тверь', 'Вологда', 'Казань', 'Магадан']
# cities_3 = cities_2[:]
# print(id(cities_2))
# print(id(cities_3))
"""
================================================
2. Извлечение элементов с помощью срезов
================================================
Выведи 2-й и 3-й элементы списка с городами.
Выведи все элементы, начиная с 3-го.
Выведи первые три элемента.
Выведи весь список через срез.
Используй отрицательные индексы для выбора последних двух элементов."""
# cities = ['Москва', 'Тверь', 'Вологда', 'Казань', 'Магадан']
# print(cities[1:3])
# print(cities[2:])
# print(cities[-2:])
"""
================================================
3. Использование шагов в срезах
================================================
Выведи каждый второй элемент списка с городам.
Выведи список в обратном порядке.
Выведи каждый второй элемент с конца."""
# print(cities_2[::2])
# print(cities_2[::-1])
# print(cities_2[::-2])
"""
================================================
4. Изменение элементов списка через срезы
================================================
Замени 2-й и 3-й элементы списка с городами на "Сочи" и "Нижний Новгород".
Замени каждый второй элемент на "Город".
Присвой новые значения кортежем: cities[1:3] = "Волгоград", "Омск"."""
# cities_2[1:3] = ['Сочи', 'Нижний Новгород']
# print(cities_2)
# cities_2[1::2] = ['Город'] * len(cities_2[1::2])
# print(cities_2)
# cities_2[1:3] = 'Волгоград', 'Омск'
# print(cities_2)
"""
================================================
5. Операции с объединением списков
================================================
Объедини два списка [1, 2, 3] и [4, 5, 6].
Продублируй список ["Python", "rocks"] два раза."""
# print([1, 2, 3] + [4, 5, 6])
# print(['Python', 'rocks'] * 2)
"""
================================================
6. Сравнение списков
================================================
Сравни [1, 2, 3] и [1, 2, 3] – равны ли они?
Проверь, что [10, 5, 3] > [5, 10, 3].
Попробуй сравнить [1, 2, 3] и [1, 2, "abc"]. Что произойдет?"""
# print([1, 2, 3] == [1, 2, 3])
# print([10, 5, 3] > [5, 10, 3])
# print([1, 2, 3] и [1, 2, "abc"]) #невозможно сравнить т.к. элемент "abc" тип данных str
"""
================================================
7. Дополнительное задание
================================================
Создай список chars = list("Python").
Выведи максимальный и минимальный символ в этом списке.
Попробуй сложить все элементы списка chars. Объясни результат."""
# chars = list('Python')
# print(min(chars))
# print(max(chars))
# print(sum(chars)) #chars = список строковых элементов, с ними невозможно производить математически операции
"""

++++++++++++++++++++++++++++++++++++++++++++++++
Методы списков
++++++++++++++++++++++++++++++++++++++++++++++++
================================================
1. Добавление элементов
================================================
Создай список numbers = [5, 10, 15].
Добавь в конец списка число 20 с помощью append().
Вставь число 7 на второе место списка с помощью insert().
Добавь строку "Python" в список numbers."""
# numbers = [5, 10, 15]
# numbers.append(20)
# numbers.insert(1, 7)
# numbers.append('Python')
# print(numbers)
"""
================================================
2. Удаление элементов
================================================
Удали число 10 из списка с помощью remove().
Удали последний элемент списка и выведи его (pop()).
Удали элемент с индексом 1 с помощью pop().
Очисти весь список numbers."""
# numbers.remove(10)
# numbers.pop()
# numbers.pop(1)
# print(numbers)
# numbers.clear()
# print(numbers)
"""
================================================
3. Копирование списков
================================================
Создай список letters = ["a", "b", "c"].
Создай копию списка с помощью copy() и list().
Проверь, являются ли оригинальный список и копия разными объектами."""
# letters = ['a', 'b', 'c']
# letters_copy = list(letters.copy())
# print(letters is letters_copy)
"""
================================================
4. Поиск элементов
================================================
Создай список marks = [2, 3, 5, 3, 4, 5, 2, 3].
Определи, сколько раз встречается число 3 в списке (count()).
Найди индекс первого вхождения числа 5 (index()).
Проверь, содержится ли число 6 в списке перед вызовом index()."""
# marks = [2, 3, 5, 3, 4, 5, 2, 3]
# print(marks.count(3))
# print(marks.index(5))
# print(6 in marks)
"""
================================================
5. Изменение порядка элементов
================================================
Создай список nums = [8, 2, 5, 1, 7].
Отсортируй его по возрастанию (sort()).
Отсортируй его по убыванию (sort(reverse=True)).
Разверни список (reverse())."""
# nums = [8, 2, 5, 1, 7]
# nums.sort()
# print(nums)
# nums.sort(reverse=True)
# print(nums)
# nums.reverse()
# print(nums)
"""
================================================
6. Сортировка строк
================================================
Создай список cities.
Отсортируй его в алфавитном порядке (sort()).
Создай новый отсортированный список с sorted(), не изменяя оригинал."""
# cities = ['Москва', 'Тверь', 'Вологда', 'Казань', 'Магадан']
# cities.sort()
# cities_sorted = sorted(cities)
# print(cities)
# print(cities_sorted)
# print(cities is cities_sorted)
"""
================================================
7. Дополнительное задание
================================================
Создай список символов chars = list("programming").
Определи количество вхождений буквы "g".
Разверни список символов (reverse()).
Попробуй отсортировать список chars (sort()). Как изменится порядок букв?"""
# chars = list('programming')
# print(chars.count('g'))
# chars.reverse()
# print(chars)
# chars.sort()
# print(chars) #в алфавитном порядке
"""
++++++++++++++++++++++++++++++++++++++++++++++++
Вложенные списки (массивы)
++++++++++++++++++++++++++++++++++++++++++++++++
================================================
1. Создание вложенного списка
================================================
Создай двумерный список matrix, содержащий 3 строки и 4 столбца со значениями от 1 до 12.
Выведи всю матрицу на экран.
Выведи вторую строку.
Выведи первый элемент третьей строки."""
matrix = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12]
]
print(matrix)
print(matrix[1])
print(matrix[2][0])
"""
================================================
2. Изменение элементов вложенного списка
================================================
Замени все элементы первой строки на 0.
Замени последний элемент второй строки на "Python".
"""
matrix[0] = [0] * len(matrix[0])
matrix[1][-1] = ['Python']
print(matrix)